import dash
import dash_bootstrap_components as dbc
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ò‡∏µ‡∏°
COLORS = {
    'background': '#f9f9f9',
    'text': '#333333',
    'primary': '#1f77b4',
    'secondary': '#ff7f0e',
    'accent': '#2ca02c',
    'grid': '#e1e1e1',
}

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
file_path_2022 = 'accident2022.csv'
file_path_2021 = 'accident2021.csv'

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏µ
data_2022 = pd.read_csv(file_path_2022)
data_2021 = pd.read_csv(file_path_2021)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data_2022['‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'] = 2022
data_2021['‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'] = 2021

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
all_data = pd.concat([data_2021, data_2022], ignore_index=True)

# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
all_data['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'] = pd.to_datetime(all_data['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'], format='%d/%m/%Y', errors='coerce')
all_data.dropna(subset=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'], inplace=True)
all_data['‡∏õ‡∏µ'] = all_data['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'].dt.year
all_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = all_data['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'].dt.month_name()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Dash ‡∏û‡∏£‡πâ‡∏≠‡∏° Theme
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])
app.title = "Road Accident Dashboard 2021-2022"

# Layout ‡∏Ç‡∏≠‡∏á Dashboard
app.layout = dbc.Container([
    # Header
    dbc.Row([
        dbc.Col(html.H1("üöó Road Accident Analytics Dashboard 2021-2022", 
                        className="text-center text-primary my-4"), 
                width=12)
    ]),

    # Control Panel
    dbc.Row([
        dbc.Col([
            html.Label("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:", className="fw-bold"),
            dcc.Dropdown(
                id='statistic-dropdown',
                options=[
                    {'label': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'ACC_CODE'},
                    {'label': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', 'value': '‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'},
                    {'label': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™', 'value': '‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™'},
                    {'label': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢', 'value': '‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'},
                    {'label': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏ß‡∏°', 'value': '‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö'}
                ],
                value='ACC_CODE',
                clearable=False,
                className="mb-3",
                style={'color': 'black'}
            )
        ], width=6, lg=6),
        
        dbc.Col([
            html.Label("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:", className="fw-bold"),
            dcc.Dropdown(
                id='province-dropdown',
                options=[{'label': province, 'value': province} for province in sorted(all_data['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique())],
                value=None,
                multi=True,
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)",
                className="mb-3",
                style={'color': 'black'}
            )
        ], width=6, lg=6)
    ]),

    # Graphs Grid
    dbc.Row([
        dbc.Col(dcc.Graph(id='monthly-trend-graph'), width=12, lg=12),
    ], className="mb-4"),

    dbc.Row([
        dbc.Col(dcc.Graph(id='accident-type-pie'), width=6, lg=6),
        dbc.Col(dcc.Graph(id='province-accidents-pie'), width=6, lg=6),
    ], className="mb-4"),

    dbc.Row([
        dbc.Col(dcc.Graph(id='fatalities-by-province-bar'), width=6, lg=6),
        dbc.Col(dcc.Graph(id='injuries-by-province-bar'), width=6, lg=6),
    ], className="mb-4"),

    dbc.Row([
        dbc.Col(dcc.Graph(id='time-of-day-heatmap'), width=12, lg=12),
    ], className="mb-4"),

    dbc.Row([
        dbc.Col(dcc.Graph(id='vehicle-type-bar'), width=6, lg=6),
        dbc.Col(dcc.Graph(id='weather-condition-pie'), width=6, lg=6),
    ], className="mb-4"),

    dbc.Row([
        dbc.Col(dcc.Graph(id='severity-distribution-histogram'), width=6, lg=6),
        dbc.Col(dcc.Graph(id='daily-accidents-line'), width=6, lg=6),
    ], className="mb-4"),

], fluid=True)

layout_defaults = {
    'plot_bgcolor': COLORS['background'],
    'paper_bgcolor': COLORS['background'],
    'font': {'color': COLORS['text']},
    'title': {
        'font': {'size': 16, 'color': COLORS['primary']},
        'x': 0.5,
        'xanchor': 'center'
    },
    'xaxis': {
        'gridcolor': COLORS['grid'],
        'zerolinecolor': COLORS['grid'],
        'title': {'font': {'color': COLORS['text']}},
        'tickfont': {'color': COLORS['text']}
    },
    'yaxis': {
        'gridcolor': COLORS['grid'],
        'zerolinecolor': COLORS['grid'],
        'title': {'font': {'color': COLORS['text']}},
        'tickfont': {'color': COLORS['text']}
    }
}

@app.callback(
    [
        Output('monthly-trend-graph', 'figure'),
        Output('accident-type-pie', 'figure'),
        Output('fatalities-by-province-bar', 'figure'),
        Output('injuries-by-province-bar', 'figure'),
        Output('time-of-day-heatmap', 'figure'),
        Output('vehicle-type-bar', 'figure'),
        Output('weather-condition-pie', 'figure'),
        Output('severity-distribution-histogram', 'figure'),
        Output('daily-accidents-line', 'figure'),
        Output('province-accidents-pie', 'figure')
    ],
    [
        Input('statistic-dropdown', 'value'),
        Input('province-dropdown', 'value')
    ]
)
def update_graphs(statistic, provinces):
    filtered_data = all_data.copy()
    if provinces:
        filtered_data = filtered_data[filtered_data['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].isin(provinces)]
    
    title_suffix = ""
    if provinces:
        if len(provinces) <= 3:
            title_suffix = f" - ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {''.join(provinces)}"
        else:
            title_suffix = f" - {len(provinces)} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
    
    stat_labels = {
        'ACC_CODE': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏',
        '‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        '‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™',
        '‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
        '‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏ß‡∏°'
    }
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
    
    monthly_data = filtered_data.groupby(['‡∏õ‡∏µ', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'])[statistic].sum().reset_index()
    month_order = ['January', 'February', 'March', 'April', 'May', 'June', 
                  'July', 'August', 'September', 'October', 'November', 'December']
    monthly_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.Categorical(monthly_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], categories=month_order, ordered=True)
    monthly_data = monthly_data.sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    monthly_data[statistic] = monthly_data[statistic] / 1000  

    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    trend_fig = px.line(
        monthly_data,
        x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        y=statistic,
        color='‡∏õ‡∏µ',
        title=f"‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°{stat_labels[statistic]}‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô{title_suffix}",
        labels={'‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', statistic: stat_labels[statistic], '‡∏õ‡∏µ': '‡∏õ‡∏µ'},
        color_discrete_map={2021: COLORS['primary'], 2022: COLORS['secondary']}
    )

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞
    for i, trace in enumerate(trend_fig.data):
        trace.opacity = 0.7  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
        if i % 2 == 1:
            trace.line.dash = 'dash'  # ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏µ 2022 ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Å‡∏ô Y ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    trend_fig.update_yaxes(range=[0, monthly_data[statistic].max() * 1.1])

    
    accident_types = filtered_data['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏'].value_counts().nlargest(10).reset_index()
    accident_types.columns = ['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    
    pie_fig = px.pie(
        accident_types, 
        names='‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', 
        values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 
        title=f"‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏{title_suffix}",
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    pie_fig.update_traces(textposition='inside', textinfo='percent+label')
    
    
    fatalities_data = filtered_data.groupby('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')['‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'].sum().reset_index()
    fatalities_data = fatalities_data.sort_values('‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', ascending=False).head(10)
    
    fatalities_fig = px.bar(
        fatalities_data, 
        x='‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', 
        y='‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', 
        title=f"‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö{title_suffix}",
        labels={'‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'},
        color='‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        color_continuous_scale='Reds'
    )
    
    
    injuries_data = filtered_data.groupby('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î')['‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö'].sum().reset_index()
    injuries_data = injuries_data.sort_values('‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö', ascending=False).head(10)
    
    injuries_fig = px.bar(
        injuries_data, 
        x='‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', 
        y='‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö', 
        title=f"‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö{title_suffix}",
        labels={'‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö'},
        color='‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö',
        color_continuous_scale='Blues'
    )
    
    
    try:
        filtered_data['‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'] = pd.to_datetime(filtered_data['‡πÄ‡∏ß‡∏•‡∏≤'], format='%H:%M', errors='coerce').dt.hour
        time_data = filtered_data.groupby(['‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']).size().reset_index(name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
        time_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.Categorical(time_data['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], categories=month_order, ordered=True)
        time_data = time_data.sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
        
        heatmap_fig = px.density_heatmap(
            time_data, 
            x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 
            y='‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', 
            z='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
            title=f"‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô{title_suffix}",
            labels={'‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á': '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏'},
            color_continuous_scale='Viridis'
        )
        heatmap_fig.update_layout(**layout_defaults)
        
    except Exception as e:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        heatmap_fig = go.Figure()
        heatmap_fig.add_annotation(
            text=f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}",
            showarrow=False,
            font=dict(size=14)
        )
    
    
    vehicle_cols = ['‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå', '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ô‡∏±‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏£‡∏ñ‡∏õ‡∏¥‡∏Ñ‡∏≠‡∏±‡∏û‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å4‡∏•‡πâ‡∏≠', '‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å6‡∏•‡πâ‡∏≠', '‡∏£‡∏ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ']
    vehicle_data = filtered_data[vehicle_cols].sum().reset_index()
    vehicle_data.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    vehicle_mapping = {
        '‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå': '‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå',
        '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ô‡∏±‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•': '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ô‡∏±‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•',
        '‡∏£‡∏ñ‡∏õ‡∏¥‡∏Ñ‡∏≠‡∏±‡∏û‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å4‡∏•‡πâ‡∏≠': '‡∏£‡∏ñ‡∏õ‡∏¥‡∏Ñ‡∏≠‡∏±‡∏û 4 ‡∏•‡πâ‡∏≠',
        '‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å6‡∏•‡πâ‡∏≠': '‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å 6 ‡∏•‡πâ‡∏≠',
        '‡∏£‡∏ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ': '‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    }
    vehicle_data['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞'] = vehicle_data['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞'].map(vehicle_mapping)
    vehicle_data = vehicle_data.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', ascending=False)
    
    vehicle_fig = px.bar(
        vehicle_data, 
        x='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞', 
        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 
        title=f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏{title_suffix}",
        color='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
        color_continuous_scale='Greens'
    )
    
    weather_data = filtered_data['‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'].value_counts().reset_index()
    weather_data.columns = ['‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    
    weather_fig = px.pie(
        weather_data, 
        names='‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', 
        values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 
        title=f"‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏{title_suffix}",
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    weather_fig.update_traces(textposition='inside', textinfo='percent+label')
    
    severity_data = pd.DataFrame({
        '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á': ['‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™', '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': [
            filtered_data['‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'].sum(),
            filtered_data['‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™'].sum(),
            filtered_data['‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'].sum()
        ]
    })
    
    severity_fig = px.bar(
        severity_data, 
        x='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á', 
        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 
        title=f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏{title_suffix}",
        color='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á',
        color_discrete_map={
            '‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': '#ff7f7f',
            '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™': '#ffbf7f',
            '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢': '#ffff7f'
        }
    )
    
    daily_data = filtered_data.groupby('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏').size().reset_index(name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏')
    daily_data = daily_data.sort_values('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏')
    
    daily_line_fig = px.line(
        daily_data, 
        x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', 
        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏', 
        title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô{title_suffix}",
        labels={'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏'}
    )
    daily_line_fig.update_traces(line=dict(width=2, color=COLORS['accent']))
    
    province_data = filtered_data['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].value_counts().nlargest(10).reset_index()
    province_data.columns = ['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    
    province_pie_fig = px.pie(
        province_data, 
        names='‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', 
        values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 
        title=f"10 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î{title_suffix}",
        color_discrete_sequence=px.colors.qualitative.Pastel1
    )
    province_pie_fig.update_traces(textposition='inside', textinfo='percent+label')

    return (
        trend_fig, pie_fig, fatalities_fig, injuries_fig, heatmap_fig, 
        vehicle_fig, weather_fig, severity_fig, daily_line_fig, province_pie_fig
    )

if __name__ == '__main__':
    app.run(debug=True)
